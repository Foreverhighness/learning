//! Command Line
//! copy from <https://github.com/rust-lang/rust-analyzer/blob/master/xtask/src/flags.rs>
#![allow(clippy::allow_attributes, reason = "don't check generated code")]
#![allow(clippy::allow_attributes_without_reason, reason = "don't check generated code")]

xflags::xflags! {
    src "./src/flags.rs"

    cmd xtask {
        /// Echo the command itself to stderr.
        optional -v, --verbose

        /// Clean workspace.
        cmd clean {}

        /// Run clippy
        cmd clippy {
            default cmd run {}

            /// Automatically apply lint suggestions.
            cmd fix {
                /// Add --allow-no-vcs --allow-dirty --allow-staged to fix
                optional -f, --force
            }

            /// Export lints for cli, cargo, header
            cmd export {
                default cmd cli {}
                cmd cargo {}
                cmd attr {}
            }
        }
    }
}
// generated start
// The following code is generated by `xflags` macro.
// Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
#[derive(Debug)]
pub struct Xtask {
    pub verbose: bool,
    pub subcommand: XtaskCmd,
}

#[derive(Debug)]
pub enum XtaskCmd {
    Clean(Clean),
    Clippy(Clippy),
}

#[derive(Debug)]
pub struct Clean;

#[derive(Debug)]
pub struct Clippy {
    pub subcommand: ClippyCmd,
}

#[derive(Debug)]
pub enum ClippyCmd {
    Run(Run),
    Fix(Fix),
    Export(Export),
}

#[derive(Debug)]
pub struct Run;

#[derive(Debug)]
pub struct Fix {
    pub force: bool,
}

#[derive(Debug)]
pub struct Export {
    pub subcommand: ExportCmd,
}

#[derive(Debug)]
pub enum ExportCmd {
    Cli(Cli),
    Cargo(Cargo),
    Attr(Attr),
}

#[derive(Debug)]
pub struct Cli;

#[derive(Debug)]
pub struct Cargo;

#[derive(Debug)]
pub struct Attr;

impl Xtask {
    #[allow(dead_code)]
    pub fn from_env_or_exit() -> Self {
        Self::from_env_or_exit_()
    }

    #[allow(dead_code)]
    pub fn from_env() -> xflags::Result<Self> {
        Self::from_env_()
    }

    #[allow(dead_code)]
    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
        Self::from_vec_(args)
    }
}
// generated end
