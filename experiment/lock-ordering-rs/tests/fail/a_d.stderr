error[E0277]: the trait bound `lock_ordering_rs::example::D: LockAfter<lock_ordering_rs::example::A>` is not satisfied
 --> tests/fail/a_d.rs:8:31
  |
8 |     let (d, mut ctx) = d.lock(&mut ctx).unwrap();
  |                          ---- ^^^^^^^^ the trait `LockAfter<lock_ordering_rs::example::A>` is not implemented for `lock_ordering_rs::example::D`
  |                          |
  |                          required by a bound introduced by this call
  |
  = help: the following other types implement trait `LockAfter<A>`:
            `lock_ordering_rs::example::D` implements `LockAfter<B>`
            `lock_ordering_rs::example::D` implements `LockAfter<C>`
            `lock_ordering_rs::example::D` implements `LockAfter<Unlocked>`
  = note: required for `lock_ordering_rs::example::A` to implement `LockBefore<lock_ordering_rs::example::D>`
note: required by a bound in `OrderedMutex::<Z, T>::lock`
 --> src/lib.rs
  |
  |     pub fn lock<A>(&self, _: &mut LockContext<A>) -> LockResult<Z, MutexGuard<T>>
  |            ---- required by a bound in this associated function
  |     where
  |         A: LockBefore<Z>,
  |            ^^^^^^^^^^^^^ required by this bound in `OrderedMutex::<Z, T>::lock`
